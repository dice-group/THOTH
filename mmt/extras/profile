#!/usr/bin/env python
import argparse
import sys
import threading
import time

import subprocess

try:
    import psutil
except ImportError:
    sys.stderr.write(
        'ERROR: unable to find \'psutil\' python module, please install it with "sudo pip install psutil".\n')
    exit(1)


class MonitorThread(threading.Thread):
    def __init__(self, delay=None, output=None):
        threading.Thread.__init__(self)
        self._delay = max(delay, 0.5) if delay is not None else 1.0
        self._output = output if output is not None else './profile.log'
        self._interruped = False

    def interrupt(self):
        self._interruped = True

    def run(self):
        with open(self._output, 'wb') as out:
            out.write('TIMESTAMP\tCPU (%)\tMEMORY (%)\n')

            while not self._interruped:
                time.sleep(self._delay)

                timestamp = time.strftime('%Y-%m-%dT%H:%M:%S')
                cpu = '%.1f' % psutil.cpu_percent(interval=None)
                mem = '%.1f' % psutil.virtual_memory().percent

                out.write('\t'.join([timestamp, cpu, mem]))
                out.write('\n')


def main():
    parser = argparse.ArgumentParser(description='Profile CPU and Memory usage of a command.')
    parser.add_argument('--sampling-delay', metavar='DELAY', dest='delay', default=1.0, type=float,
                        help='The delay from a measure and the next expressed in seconds. (default is 1 second)')
    parser.add_argument('--output', metavar='OUTPUT_FILE', dest='output', default=None,
                        help='The file to store measurements. (default is ./profile.log)')
    parser.add_argument('command', metavar='COMMAND', help='The command to execute.')

    args = parser.parse_args()

    monitor = MonitorThread(delay=args.delay, output=args.output)
    process = subprocess.Popen(args.command.split())

    monitor.start()
    returncode = process.wait()
    monitor.interrupt()
    monitor.join()

    exit(returncode)


if __name__ == '__main__':
    psutil.cpu_percent(interval=None) # First result is always 0.0% and must be ignored
    main()
