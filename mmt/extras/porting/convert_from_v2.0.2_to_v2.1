#!/usr/bin/env python

import sys
import os
import shutil
import torch
import argparse
sys.path.insert(0, os.path.abspath(os.path.join(__file__, os.pardir, os.pardir, os.pardir, 'build', 'lib', 'pynmt')))


class ArgsException(Exception):
    def __init__(self, parser, error):
        self.parser = parser
        self.message = error


def main():
    # reopen stdout in unbuffered mode
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description='Port a 2.0.2 model to version 2.1')

    parser.add_argument('--engine-path', dest='engine_path', help='the path to the 2.0.2 engine to port')

    argv = sys.argv[1:]     # ignore sys.argv[0], that is './convert_from_v2.0.2_to_v2.1'

    # Parse args
    args = parser.parse_args(argv)

    if not args.engine_path:
        raise ArgsException(parser, 'Please pass the path to the 2.0.2 engine you want to update '
                                    '(use --engine-path option)')
    if not (os.path.isdir(args.engine_path)):
        raise ArgsException(parser, "No 2.0.2 engine found in path args.engine_path")

    engine_models_path = os.path.join(os.path.realpath(args.engine_path), 'models')
    decoder_path = os.path.join(engine_models_path, 'decoder')
    backup_decoder_path = os.path.join(decoder_path, 'backup')

    try:
        print "Creating decoder backup..." ,

        if os.path.exists(backup_decoder_path):
            shutil.rmtree(backup_decoder_path)
        os.makedirs(backup_decoder_path)

        for cur_file in os.listdir(decoder_path):
            if not os.path.isdir(os.path.join(decoder_path, cur_file)):
                shutil.copy(os.path.join(decoder_path, cur_file), os.path.join(backup_decoder_path, cur_file))
        print "Done"

        print "Updating decoder configuration..." ,
        engines = {}
        settings = []
        with open(os.path.join(backup_decoder_path, "model.conf"), "r") as cfg_in_stream:
            for line in cfg_in_stream:
                if line.startswith('model.'):
                    key, model_name = map(str.strip, line.split("="))
                    engines[key[6:]] = model_name
                else:
                    settings.append(line).strip()

        with open(os.path.join(decoder_path, "model.conf"), "w") as cfg_out_stream:
            cfg_out_stream.write('[models]\n')
            for key in engines:
                cfg_out_stream.write('%s = %s\n' % (key, engines[key]))
            cfg_out_stream.write('[settings]\n')
            for s in settings:
                cfg_out_stream.write('%s\n' % s)
        print "Done"

        print "Porting decoders..." ,
        for key in engines:
            convert_model(backup_decoder_path, decoder_path, engines[key])
        print "Done."
        print "\nCongratulations! Your 2.0.2 engine was successfully ported to version 2.1"

    except Exception as e:
        print "An error occurred. Reverting the backup data into the decoder..." ,
        for cur_file in os.listdir(backup_decoder_path):
            shutil.copy(os.path.join(backup_decoder_path, cur_file), os.path.join(decoder_path, cur_file))
        print "Done"
        raise e


def convert_model(input_folder, output_folder, filename):
    model_in = os.path.join(input_folder, filename)
    model_out = os.path.join(output_folder, filename)

    chkpt_in = torch.load(model_in + '.dat', map_location=lambda storage, loc: storage)

    chkpt_out = {
        'model': chkpt_in['model'],
        'generator': chkpt_in['generator'],
    }
    torch.save(chkpt_out, model_out + '.dat')

    dict_out = {
        'src': chkpt_in['dicts']['src'],
        'tgt': chkpt_in['dicts']['tgt'],
    }
    torch.save(dict_out, model_out + '.vcb')


if __name__ == '__main__':
    main()
